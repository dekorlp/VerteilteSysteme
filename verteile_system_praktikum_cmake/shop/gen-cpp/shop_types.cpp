/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "shop_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




ProductAnswer::~ProductAnswer() throw() {
}


void ProductAnswer::__set_sensorId(const int32_t val) {
  this->sensorId = val;
}

void ProductAnswer::__set_preis(const int32_t val) {
  this->preis = val;
}

void ProductAnswer::__set_menge(const int32_t val) {
  this->menge = val;
}

uint32_t ProductAnswer::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sensorId);
          this->__isset.sensorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->preis);
          this->__isset.preis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->menge);
          this->__isset.menge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProductAnswer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProductAnswer");

  xfer += oprot->writeFieldBegin("sensorId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sensorId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("preis", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->preis);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("menge", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->menge);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProductAnswer &a, ProductAnswer &b) {
  using ::std::swap;
  swap(a.sensorId, b.sensorId);
  swap(a.preis, b.preis);
  swap(a.menge, b.menge);
  swap(a.__isset, b.__isset);
}

ProductAnswer::ProductAnswer(const ProductAnswer& other0) {
  sensorId = other0.sensorId;
  preis = other0.preis;
  menge = other0.menge;
  __isset = other0.__isset;
}
ProductAnswer& ProductAnswer::operator=(const ProductAnswer& other1) {
  sensorId = other1.sensorId;
  preis = other1.preis;
  menge = other1.menge;
  __isset = other1.__isset;
  return *this;
}
void ProductAnswer::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProductAnswer(";
  out << "sensorId=" << to_string(sensorId);
  out << ", " << "preis=" << to_string(preis);
  out << ", " << "menge=" << to_string(menge);
  out << ")";
}


Bill::~Bill() throw() {
}


void Bill::__set_produkte(const std::vector<ProductAnswer> & val) {
  this->produkte = val;
}

uint32_t Bill::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->produkte.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->produkte.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->produkte[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.produkte = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bill::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Bill");

  xfer += oprot->writeFieldBegin("produkte", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->produkte.size()));
    std::vector<ProductAnswer> ::const_iterator _iter7;
    for (_iter7 = this->produkte.begin(); _iter7 != this->produkte.end(); ++_iter7)
    {
      xfer += (*_iter7).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Bill &a, Bill &b) {
  using ::std::swap;
  swap(a.produkte, b.produkte);
  swap(a.__isset, b.__isset);
}

Bill::Bill(const Bill& other8) {
  produkte = other8.produkte;
  __isset = other8.__isset;
}
Bill& Bill::operator=(const Bill& other9) {
  produkte = other9.produkte;
  __isset = other9.__isset;
  return *this;
}
void Bill::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Bill(";
  out << "produkte=" << to_string(produkte);
  out << ")";
}


